// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	messages "lets-go-chat-v2/internal/messages"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMessageRepositoryInterface is a mock of MessageRepositoryInterface interface.
type MockMessageRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryInterfaceMockRecorder
}

// MockMessageRepositoryInterfaceMockRecorder is the mock recorder for MockMessageRepositoryInterface.
type MockMessageRepositoryInterfaceMockRecorder struct {
	mock *MockMessageRepositoryInterface
}

// NewMockMessageRepositoryInterface creates a new mock instance.
func NewMockMessageRepositoryInterface(ctrl *gomock.Controller) *MockMessageRepositoryInterface {
	mock := &MockMessageRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepositoryInterface) EXPECT() *MockMessageRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUserMessage mocks base method.
func (m *MockMessageRepositoryInterface) CreateUserMessage(ctx context.Context, userId uuid.UUID, message string) (*messages.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserMessage", ctx, userId, message)
	ret0, _ := ret[0].(*messages.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserMessage indicates an expected call of CreateUserMessage.
func (mr *MockMessageRepositoryInterfaceMockRecorder) CreateUserMessage(ctx, userId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserMessage", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).CreateUserMessage), ctx, userId, message)
}

// GetUnreadMessages mocks base method.
func (m *MockMessageRepositoryInterface) GetUnreadMessages(ctx context.Context) ([]*messages.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessages", ctx)
	ret0, _ := ret[0].([]*messages.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessages indicates an expected call of GetUnreadMessages.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetUnreadMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessages", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetUnreadMessages), ctx)
}
