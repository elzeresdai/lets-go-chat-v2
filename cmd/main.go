package main

import (
	"context"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	middleware2 "github.com/labstack/echo/v4/middleware"
	"github.com/maxchagin/go-memorycache-example"
	echoSwagger "github.com/swaggo/echo-swagger"
	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it.
	db2 "lets-go-chat-v2/internal/messages/db"
	"lets-go-chat-v2/internal/middleware"
	"lets-go-chat-v2/internal/users"
	"lets-go-chat-v2/internal/users/db"
	"lets-go-chat-v2/pkg/client/postgresql"
	"lets-go-chat-v2/pkg/logging"
	"lets-go-chat-v2/pkg/websocket"
	"log"
	"os"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
	logger := logging.GetLogger()
	logger.Info("Start app")

	//cfg := config.GetConfig()
	err := godotenv.Load(".env")
	if err != nil {
		logger.Fatalf("Error loading .env file")
	}

	port := os.Getenv("PORT")

	postgreSQLClient, err := postgresql.NewClient(context.TODO(), 3)
	if err != nil {
		logger.Fatalf("%v", err)
	}
	var cache *memorycache.Cache
	repository := db.NewUserRepo(postgreSQLClient, logger, cache)
	messageRepo := db2.NewMessageRepo(postgreSQLClient, logger)
	logger.Info("register users handler")

	e := echo.New()
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	e.Use(middleware2.Recover())
	e.Use(middleware.LoggingMiddleware)

	handler := users.NewHandler(repository, logger, cache)
	handler.Register(e)

	hub := websocket.NewHub(repository, messageRepo)
	go hub.Run()

	e.GET("/chat/ws.rtm.start", middleware.AuthMiddleware(func(c echo.Context) error {
		log.Println(c.Request().Context())
		websocket.ServeWs(hub, c.Response(), c.Request())
		return nil
	}))
	logger.Fatal(e.Start(":" + port))
	return
}
